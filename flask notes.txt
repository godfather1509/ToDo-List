FLASK NOTES

1. Flask Setup:

    Flask is a micro web framework used to create web applications in Python.
    The app = Flask(__name__) line initializes the Flask application.
    The @app.route() decorator is used to define routes (endpoints) for the web application.

2. Database Configuration:

    SQLAlchemy is used as an ORM (Object Relational Mapper) to interact with the SQLite database.
    app.config["SQLALCHEMY_DATABASE_URI"] = r"sqlite:///krishna.db" sets up the SQLite database named krishna.db.
    The db object is created as an instance of SQLAlchemy.

3. ToDo Model:

    The ToDo class defines the structure of the database table using SQLAlchemy. It has the following columns:
        Sr: Integer, Primary Key.
        title: String, stores the title of the task.
        desc: String, stores the description of the task.
        date: String, stores the date associated with the task.
        time: String, stores the time associated with the task.
        date_created: DateTime, stores the timestamp when the task was created.

4. Routes and Views:

    @app.route("/"): This route handles the home page of the application.
        On a GET request, it fetches all tasks from the database and displays them.
        On a POST request, it adds a new task to the database, splitting the date and time if provided.
        If the user checks the box (check), it starts a new thread to play an audio file at a specified time.

    @app.route("/update/<int:Sr>"): This route handles the update of an existing task.
        It fetches the task with the given Sr (Primary Key) and allows the user to update it.
        If the checkbox is ticked, it starts a new thread to play an audio file at a specified time.

    @app.route("/delete/<int:Sr>"): This route deletes the task with the given Sr from the database.

    @app.route("/name"): This route displays a specific message, "Creator of this website is Ayush Gupta", and also renders the 
    index.html template.

5. Audio Player:

    player(time): This function plays an audio file (water.mp3) using the pygame library at a specified time.
        It continuously checks the current time and compares it to the provided time.
        If the current time matches the specified time, it plays the audio file for 10 seconds, then stops it.

6. Threading:

    The code uses Pythonâ€™s threading module to run the audio player in a separate thread so that the web application remains responsive.

7. Starting the Application:

    if __name__ == "__main__": ensures that the Flask application runs only if the script is executed directly.
    with app.app_context(): db.create_all() ensures that the database tables are created before the application starts.
    app.run(debug=True, port=1500) runs the application in debug mode on port 1500.

8. Template and Static Files:

    The templates for the web pages (like index.html) should be stored in a templates folder.
    Static files like CSS, JavaScript, and images should be placed in a static folder.


We use jinja 2 template engine to pass varible/data from python flask to HTML 